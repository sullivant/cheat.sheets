# curl
# Transfer data from or to a server using various protocols.

# Download a file from a URL and save it with a specific name
curl -o filename.ext http://example.com/file.txt

# Download a file from a URL and save it with the original filename
curl -O http://example.com/file.txt

# Download a file and limit the download speed
curl --limit-rate 100K http://example.com/file.txt

# Follow redirects if the URL has moved
curl -L http://example.com

# Send POST data to a server
curl -d "name=value" http://example.com/resource

# Send JSON data with a POST request
curl -H "Content-Type: application/json" -d '{"key":"value"}' http://example.com/resource

# Include headers in the output
curl -i http://example.com

# Display only the HTTP headers for a GET request
curl -I http://example.com

# Send a request with a custom header
curl -H "Custom-Header: Value" http://example.com

# Authenticate with a username and password
curl -u username:password http://example.com

# Use a different request method like PUT or DELETE
curl -X PUT http://example.com/resource

# Download multiple URLs in sequence
curl -O http://example.com/file1.txt -O http://example.com/file2.txt

# Resume a failed or interrupted download
curl -C - -O http://example.com/largefile.zip

# Transfer a file using FTP
curl -T localfile.txt ftp://ftp.example.com/upload/

# Specify a proxy for the request
curl -x http://proxy-server:port http://example.com

# Send data with the URL encoded format
curl --data-urlencode "key=value" http://example.com/resource

# Save the response headers to a file
curl -D headers.txt http://example.com

# Download a file and run it through a pipe (e.g., to `grep`)
curl http://example.com/file.txt | grep "search-string"
